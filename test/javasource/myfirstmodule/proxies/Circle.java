// This file was generated by Mendix Business Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class Circle
{
	private final IMendixObject circleMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "MyFirstModule.Circle";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		circleValue("circleValue");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public Circle(IContext context)
	{
		this(context, Core.instantiate(context, "MyFirstModule.Circle"));
	}

	protected Circle(IContext context, IMendixObject circleMendixObject)
	{
		if (circleMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("MyFirstModule.Circle", circleMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a MyFirstModule.Circle");

		this.circleMendixObject = circleMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new Circle(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static myfirstmodule.proxies.Circle create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "MyFirstModule.Circle");
		return new myfirstmodule.proxies.Circle(context, mendixObject);
	}

	/**
	 * @deprecated Use 'Circle.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static myfirstmodule.proxies.Circle initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return myfirstmodule.proxies.Circle.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static myfirstmodule.proxies.Circle initialize(IContext context, IMendixObject mendixObject)
	{
		return new myfirstmodule.proxies.Circle(context, mendixObject);
	}

	public static myfirstmodule.proxies.Circle load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return myfirstmodule.proxies.Circle.initialize(context, mendixObject);
	}

	public static java.util.List<myfirstmodule.proxies.Circle> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<myfirstmodule.proxies.Circle> result = new java.util.ArrayList<myfirstmodule.proxies.Circle>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//MyFirstModule.Circle" + xpathConstraint))
			result.add(myfirstmodule.proxies.Circle.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of circleValue
	 */
	public final Integer getcircleValue()
	{
		return getcircleValue(getContext());
	}

	/**
	 * @param context
	 * @return value of circleValue
	 */
	public final Integer getcircleValue(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.circleValue.toString());
	}

	/**
	 * Set value of circleValue
	 * @param circlevalue
	 */
	public final void setcircleValue(Integer circlevalue)
	{
		setcircleValue(getContext(), circlevalue);
	}

	/**
	 * Set value of circleValue
	 * @param context
	 * @param circlevalue
	 */
	public final void setcircleValue(IContext context, Integer circlevalue)
	{
		getMendixObject().setValue(context, MemberNames.circleValue.toString(), circlevalue);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return circleMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final myfirstmodule.proxies.Circle that = (myfirstmodule.proxies.Circle) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "MyFirstModule.Circle";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
