// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class UserLimitation
{
	private final IMendixObject userLimitationMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "System.UserLimitation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		LimitationType("LimitationType"),
		AmountType("AmountType"),
		NumberOfAllowedUsers("NumberOfAllowedUsers"),
		NumberOfAllowedUsersString("NumberOfAllowedUsersString"),
		UserLimitation_LicenseInformation("System.UserLimitation_LicenseInformation");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public UserLimitation(IContext context)
	{
		this(context, Core.instantiate(context, "System.UserLimitation"));
	}

	protected UserLimitation(IContext context, IMendixObject userLimitationMendixObject)
	{
		if (userLimitationMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("System.UserLimitation", userLimitationMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a System.UserLimitation");

		this.userLimitationMendixObject = userLimitationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new UserLimitation(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static system.proxies.UserLimitation create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "System.UserLimitation");
		return new system.proxies.UserLimitation(context, mendixObject);
	}

	/**
	 * @deprecated Use 'UserLimitation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static system.proxies.UserLimitation initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return system.proxies.UserLimitation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static system.proxies.UserLimitation initialize(IContext context, IMendixObject mendixObject)
	{
		return new system.proxies.UserLimitation(context, mendixObject);
	}

	public static system.proxies.UserLimitation load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return system.proxies.UserLimitation.initialize(context, mendixObject);
	}

	public static java.util.List<system.proxies.UserLimitation> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<system.proxies.UserLimitation> result = new java.util.ArrayList<system.proxies.UserLimitation>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//System.UserLimitation" + xpathConstraint))
			result.add(system.proxies.UserLimitation.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of LimitationType
	 * @param limitationtype
	 */
	public final system.proxies.UserLimitationType getLimitationType()
	{
		return getLimitationType(getContext());
	}

	/**
	 * @param context
	 * @return value of LimitationType
	 */
	public final system.proxies.UserLimitationType getLimitationType(IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.LimitationType.toString());
		if (obj == null)
			return null;

		return system.proxies.UserLimitationType.valueOf((String) obj);
	}

	/**
	 * Set value of LimitationType
	 * @param limitationtype
	 */
	public final void setLimitationType(system.proxies.UserLimitationType limitationtype)
	{
		setLimitationType(getContext(), limitationtype);
	}

	/**
	 * Set value of LimitationType
	 * @param context
	 * @param limitationtype
	 */
	public final void setLimitationType(IContext context, system.proxies.UserLimitationType limitationtype)
	{
		if (limitationtype != null)
			getMendixObject().setValue(context, MemberNames.LimitationType.toString(), limitationtype.toString());
		else
			getMendixObject().setValue(context, MemberNames.LimitationType.toString(), null);
	}

	/**
	 * Set value of AmountType
	 * @param amounttype
	 */
	public final system.proxies.UserAmountType getAmountType()
	{
		return getAmountType(getContext());
	}

	/**
	 * @param context
	 * @return value of AmountType
	 */
	public final system.proxies.UserAmountType getAmountType(IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.AmountType.toString());
		if (obj == null)
			return null;

		return system.proxies.UserAmountType.valueOf((String) obj);
	}

	/**
	 * Set value of AmountType
	 * @param amounttype
	 */
	public final void setAmountType(system.proxies.UserAmountType amounttype)
	{
		setAmountType(getContext(), amounttype);
	}

	/**
	 * Set value of AmountType
	 * @param context
	 * @param amounttype
	 */
	public final void setAmountType(IContext context, system.proxies.UserAmountType amounttype)
	{
		if (amounttype != null)
			getMendixObject().setValue(context, MemberNames.AmountType.toString(), amounttype.toString());
		else
			getMendixObject().setValue(context, MemberNames.AmountType.toString(), null);
	}

	/**
	 * @return value of NumberOfAllowedUsers
	 */
	public final Integer getNumberOfAllowedUsers()
	{
		return getNumberOfAllowedUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of NumberOfAllowedUsers
	 */
	public final Integer getNumberOfAllowedUsers(IContext context)
	{
		return (Integer) getMendixObject().getValue(context, MemberNames.NumberOfAllowedUsers.toString());
	}

	/**
	 * Set value of NumberOfAllowedUsers
	 * @param numberofallowedusers
	 */
	public final void setNumberOfAllowedUsers(Integer numberofallowedusers)
	{
		setNumberOfAllowedUsers(getContext(), numberofallowedusers);
	}

	/**
	 * Set value of NumberOfAllowedUsers
	 * @param context
	 * @param numberofallowedusers
	 */
	public final void setNumberOfAllowedUsers(IContext context, Integer numberofallowedusers)
	{
		getMendixObject().setValue(context, MemberNames.NumberOfAllowedUsers.toString(), numberofallowedusers);
	}

	/**
	 * @return value of NumberOfAllowedUsersString
	 */
	public final String getNumberOfAllowedUsersString()
	{
		return getNumberOfAllowedUsersString(getContext());
	}

	/**
	 * @param context
	 * @return value of NumberOfAllowedUsersString
	 */
	public final String getNumberOfAllowedUsersString(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.NumberOfAllowedUsersString.toString());
	}

	/**
	 * Set value of NumberOfAllowedUsersString
	 * @param numberofallowedusersstring
	 */
	public final void setNumberOfAllowedUsersString(String numberofallowedusersstring)
	{
		setNumberOfAllowedUsersString(getContext(), numberofallowedusersstring);
	}

	/**
	 * Set value of NumberOfAllowedUsersString
	 * @param context
	 * @param numberofallowedusersstring
	 */
	public final void setNumberOfAllowedUsersString(IContext context, String numberofallowedusersstring)
	{
		getMendixObject().setValue(context, MemberNames.NumberOfAllowedUsersString.toString(), numberofallowedusersstring);
	}

	/**
	 * @return value of UserLimitation_LicenseInformation
	 */
	public final system.proxies.LicenseInformation getUserLimitation_LicenseInformation() throws CoreException
	{
		return getUserLimitation_LicenseInformation(getContext());
	}

	/**
	 * @param context
	 * @return value of UserLimitation_LicenseInformation
	 */
	public final system.proxies.LicenseInformation getUserLimitation_LicenseInformation(IContext context) throws CoreException
	{
		system.proxies.LicenseInformation result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.UserLimitation_LicenseInformation.toString());
		if (identifier != null)
			result = system.proxies.LicenseInformation.load(context, identifier);
		return result;
	}

	/**
	 * Set value of UserLimitation_LicenseInformation
	 * @param userlimitation_licenseinformation
	 */
	public final void setUserLimitation_LicenseInformation(system.proxies.LicenseInformation userlimitation_licenseinformation)
	{
		setUserLimitation_LicenseInformation(getContext(), userlimitation_licenseinformation);
	}

	/**
	 * Set value of UserLimitation_LicenseInformation
	 * @param context
	 * @param userlimitation_licenseinformation
	 */
	public final void setUserLimitation_LicenseInformation(IContext context, system.proxies.LicenseInformation userlimitation_licenseinformation)
	{
		if (userlimitation_licenseinformation == null)
			getMendixObject().setValue(context, MemberNames.UserLimitation_LicenseInformation.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.UserLimitation_LicenseInformation.toString(), userlimitation_licenseinformation.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return userLimitationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final system.proxies.UserLimitation that = (system.proxies.UserLimitation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "System.UserLimitation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().getGuid();
	}
}
