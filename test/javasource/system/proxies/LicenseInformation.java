// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package system.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class LicenseInformation
{
	private final IMendixObject licenseInformationMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "System.LicenseInformation";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ServerID("ServerID"),
		LicenseKey("LicenseKey"),
		Company("Company"),
		LicenseType("LicenseType"),
		ExpirationDate("ExpirationDate"),
		RuntimeMode("RuntimeMode"),
		SeparateAnonymousUsers("SeparateAnonymousUsers");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public LicenseInformation(IContext context)
	{
		this(context, Core.instantiate(context, "System.LicenseInformation"));
	}

	protected LicenseInformation(IContext context, IMendixObject licenseInformationMendixObject)
	{
		if (licenseInformationMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("System.LicenseInformation", licenseInformationMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a System.LicenseInformation");

		this.licenseInformationMendixObject = licenseInformationMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new LicenseInformation(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static system.proxies.LicenseInformation create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "System.LicenseInformation");
		return new system.proxies.LicenseInformation(context, mendixObject);
	}

	/**
	 * @deprecated Use 'LicenseInformation.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static system.proxies.LicenseInformation initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return system.proxies.LicenseInformation.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static system.proxies.LicenseInformation initialize(IContext context, IMendixObject mendixObject)
	{
		return new system.proxies.LicenseInformation(context, mendixObject);
	}

	public static system.proxies.LicenseInformation load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return system.proxies.LicenseInformation.initialize(context, mendixObject);
	}

	public static java.util.List<system.proxies.LicenseInformation> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<system.proxies.LicenseInformation> result = new java.util.ArrayList<system.proxies.LicenseInformation>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//System.LicenseInformation" + xpathConstraint))
			result.add(system.proxies.LicenseInformation.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of ServerID
	 */
	public final String getServerID()
	{
		return getServerID(getContext());
	}

	/**
	 * @param context
	 * @return value of ServerID
	 */
	public final String getServerID(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.ServerID.toString());
	}

	/**
	 * Set value of ServerID
	 * @param serverid
	 */
	public final void setServerID(String serverid)
	{
		setServerID(getContext(), serverid);
	}

	/**
	 * Set value of ServerID
	 * @param context
	 * @param serverid
	 */
	public final void setServerID(IContext context, String serverid)
	{
		getMendixObject().setValue(context, MemberNames.ServerID.toString(), serverid);
	}

	/**
	 * @return value of LicenseKey
	 */
	public final String getLicenseKey()
	{
		return getLicenseKey(getContext());
	}

	/**
	 * @param context
	 * @return value of LicenseKey
	 */
	public final String getLicenseKey(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.LicenseKey.toString());
	}

	/**
	 * Set value of LicenseKey
	 * @param licensekey
	 */
	public final void setLicenseKey(String licensekey)
	{
		setLicenseKey(getContext(), licensekey);
	}

	/**
	 * Set value of LicenseKey
	 * @param context
	 * @param licensekey
	 */
	public final void setLicenseKey(IContext context, String licensekey)
	{
		getMendixObject().setValue(context, MemberNames.LicenseKey.toString(), licensekey);
	}

	/**
	 * @return value of Company
	 */
	public final String getCompany()
	{
		return getCompany(getContext());
	}

	/**
	 * @param context
	 * @return value of Company
	 */
	public final String getCompany(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Company.toString());
	}

	/**
	 * Set value of Company
	 * @param company
	 */
	public final void setCompany(String company)
	{
		setCompany(getContext(), company);
	}

	/**
	 * Set value of Company
	 * @param context
	 * @param company
	 */
	public final void setCompany(IContext context, String company)
	{
		getMendixObject().setValue(context, MemberNames.Company.toString(), company);
	}

	/**
	 * Set value of LicenseType
	 * @param licensetype
	 */
	public final system.proxies.LicenseType getLicenseType()
	{
		return getLicenseType(getContext());
	}

	/**
	 * @param context
	 * @return value of LicenseType
	 */
	public final system.proxies.LicenseType getLicenseType(IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.LicenseType.toString());
		if (obj == null)
			return null;

		return system.proxies.LicenseType.valueOf((String) obj);
	}

	/**
	 * Set value of LicenseType
	 * @param licensetype
	 */
	public final void setLicenseType(system.proxies.LicenseType licensetype)
	{
		setLicenseType(getContext(), licensetype);
	}

	/**
	 * Set value of LicenseType
	 * @param context
	 * @param licensetype
	 */
	public final void setLicenseType(IContext context, system.proxies.LicenseType licensetype)
	{
		if (licensetype != null)
			getMendixObject().setValue(context, MemberNames.LicenseType.toString(), licensetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.LicenseType.toString(), null);
	}

	/**
	 * @return value of ExpirationDate
	 */
	public final java.util.Date getExpirationDate()
	{
		return getExpirationDate(getContext());
	}

	/**
	 * @param context
	 * @return value of ExpirationDate
	 */
	public final java.util.Date getExpirationDate(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.ExpirationDate.toString());
	}

	/**
	 * Set value of ExpirationDate
	 * @param expirationdate
	 */
	public final void setExpirationDate(java.util.Date expirationdate)
	{
		setExpirationDate(getContext(), expirationdate);
	}

	/**
	 * Set value of ExpirationDate
	 * @param context
	 * @param expirationdate
	 */
	public final void setExpirationDate(IContext context, java.util.Date expirationdate)
	{
		getMendixObject().setValue(context, MemberNames.ExpirationDate.toString(), expirationdate);
	}

	/**
	 * Set value of RuntimeMode
	 * @param runtimemode
	 */
	public final system.proxies.RuntimeMode getRuntimeMode()
	{
		return getRuntimeMode(getContext());
	}

	/**
	 * @param context
	 * @return value of RuntimeMode
	 */
	public final system.proxies.RuntimeMode getRuntimeMode(IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.RuntimeMode.toString());
		if (obj == null)
			return null;

		return system.proxies.RuntimeMode.valueOf((String) obj);
	}

	/**
	 * Set value of RuntimeMode
	 * @param runtimemode
	 */
	public final void setRuntimeMode(system.proxies.RuntimeMode runtimemode)
	{
		setRuntimeMode(getContext(), runtimemode);
	}

	/**
	 * Set value of RuntimeMode
	 * @param context
	 * @param runtimemode
	 */
	public final void setRuntimeMode(IContext context, system.proxies.RuntimeMode runtimemode)
	{
		if (runtimemode != null)
			getMendixObject().setValue(context, MemberNames.RuntimeMode.toString(), runtimemode.toString());
		else
			getMendixObject().setValue(context, MemberNames.RuntimeMode.toString(), null);
	}

	/**
	 * @return value of SeparateAnonymousUsers
	 */
	public final Boolean getSeparateAnonymousUsers()
	{
		return getSeparateAnonymousUsers(getContext());
	}

	/**
	 * @param context
	 * @return value of SeparateAnonymousUsers
	 */
	public final Boolean getSeparateAnonymousUsers(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.SeparateAnonymousUsers.toString());
	}

	/**
	 * Set value of SeparateAnonymousUsers
	 * @param separateanonymoususers
	 */
	public final void setSeparateAnonymousUsers(Boolean separateanonymoususers)
	{
		setSeparateAnonymousUsers(getContext(), separateanonymoususers);
	}

	/**
	 * Set value of SeparateAnonymousUsers
	 * @param context
	 * @param separateanonymoususers
	 */
	public final void setSeparateAnonymousUsers(IContext context, Boolean separateanonymoususers)
	{
		getMendixObject().setValue(context, MemberNames.SeparateAnonymousUsers.toString(), separateanonymoususers);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return licenseInformationMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final system.proxies.LicenseInformation that = (system.proxies.LicenseInformation) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "System.LicenseInformation";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().getGuid();
	}
}
